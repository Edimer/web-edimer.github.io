{
  "hash": "057bc3409b671c706294cfa328a6b1cc",
  "result": {
    "markdown": "---\ntitle: \"Algoritmos de ML con caret en R (1)\"\nauthor: \"Edimer (Sidereus)\"\ndate: \"03-23-2020\"\ndescription: \"Algoritmos de machine learning con caret y R. Entrenamiento de modelos random forest y support vector machine en problemas de clasificación supervisada.\"\ncategories:\n  - R\n  - caret\n  - ML\nimage: \"img2.png \"\nlang: es\ncss: estilo.css\nformat: \n  html:\n    toc: true\n    toc-title: \"Tabla de contenido\"\n    smooth-scroll: true\n    code-fold: true\n    df-print: paged\n    toc-location: left\n    number-depth: 4\n    code-copy: true\n    highlight-style: github\n    code-tools: \n      source: true \n    code-link: true \n---\n\n\n\n\n# Datos\n\n- [Fuente: predicción de estrellas púlsar.](https://www.kaggle.com/pavanraj159/predicting-a-pulsar-star#pulsar_stars.csv)\n- [¿Qué es un púlsar?](https://es.wikipedia.org/wiki/P%C3%BAlsar)\n\n# Problema\n\n- **Descripción:** a través de emisiones de radio detectables en nuestro planeta, los científicos perfilan los púlsares en función de múltiples métricas provenientes del análisis de señales; el ruido causado por interferencia de radiofrecuencia dificulta la labor de los investigadores. Se propone generar un sistema automático que proporcione alta precisión para detectar estrellas **púlsar**. ([ver más información](https://archive.ics.uci.edu/ml/datasets/HTRU2))\n- **Tipo de aprendizaje:** Aprendizaje Supervisado - Clasificación Binaria.\n- Algoritmos:\n    - [Random Forest](https://es.wikipedia.org/wiki/Random_forest)\n    - [Support Vector Machine-SVM](https://es.wikipedia.org/wiki/M%C3%A1quinas_de_vectores_de_soporte)\n\n# Importando datos\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Cargando biblioteca data.table\nlibrary(data.table)\n\n# Nombres de variables\nnombres <- c(\"media_pefil\", \"de_perfil\", \"curtosis_perfil\", \"asimet_perfil\", \"media_dmsnr\",\n             \"de_dmsnr\", \"curtosis_dmsnr\", \"asimet_dmsnr\", \"pulsar\")\n\ndf_pulsar <- fread(\"data/pulsar_stars.csv\", sep = \",\", col.names = nombres,\n                   colClasses = c(rep(\"numeric\", 8), \"factor\"))\nhead(df_pulsar)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"media_pefil\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"de_perfil\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"curtosis_perfil\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"asimet_perfil\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"media_dmsnr\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"de_dmsnr\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"curtosis_dmsnr\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"asimet_dmsnr\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"pulsar\"],\"name\":[9],\"type\":[\"fct\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"140.56250\",\"2\":\"55.68378\",\"3\":\"-0.23457141\",\"4\":\"-0.6996484\",\"5\":\"3.199833\",\"6\":\"19.11043\",\"7\":\"7.975532\",\"8\":\"74.24222\",\"9\":\"0\"},{\"1\":\"102.50781\",\"2\":\"58.88243\",\"3\":\"0.46531815\",\"4\":\"-0.5150879\",\"5\":\"1.677258\",\"6\":\"14.86015\",\"7\":\"10.576487\",\"8\":\"127.39358\",\"9\":\"0\"},{\"1\":\"103.01562\",\"2\":\"39.34165\",\"3\":\"0.32332837\",\"4\":\"1.0511644\",\"5\":\"3.121237\",\"6\":\"21.74467\",\"7\":\"7.735822\",\"8\":\"63.17191\",\"9\":\"0\"},{\"1\":\"136.75000\",\"2\":\"57.17845\",\"3\":\"-0.06841464\",\"4\":\"-0.6362384\",\"5\":\"3.642977\",\"6\":\"20.95928\",\"7\":\"6.896499\",\"8\":\"53.59366\",\"9\":\"0\"},{\"1\":\"88.72656\",\"2\":\"40.67223\",\"3\":\"0.60086608\",\"4\":\"1.1234917\",\"5\":\"1.178930\",\"6\":\"11.46872\",\"7\":\"14.269573\",\"8\":\"252.56731\",\"9\":\"0\"},{\"1\":\"93.57031\",\"2\":\"46.69811\",\"3\":\"0.53190485\",\"4\":\"0.4167211\",\"5\":\"1.636288\",\"6\":\"14.54507\",\"7\":\"10.621748\",\"8\":\"131.39400\",\"9\":\"0\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n# Exploración\n\n- **Definiento tema de `ggplot2` para gráficos:**\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Cargando biblioteca tidyverse\nlibrary(tidyverse)\n\n# Tema personalizado para gráficos\nmi_temagg <- theme_light() +\n  theme(axis.text.x = element_text(color = \"black\"),\n        axis.text.y = element_text(color = \"black\"),\n        strip.background = element_rect(fill = \"gray5\"),\n        strip.text = element_text(color = \"white\", size = 12))\n```\n:::\n\n\n## Variable respuesta\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf_pulsar %>% group_by(pulsar) %>% count() %>% \n  ggplot(data = ., aes(x = pulsar, y = n)) +\n  geom_col(color = \"black\", fill = \"#033660\") +\n  geom_label(aes(label = n)) +\n  labs(x = \"¿Púlsar?\", title = \"Distribución de variable respuesta\",\n       subtitle = \"0=No\\n1=Sí\") +\n  mi_temagg\n```\n\n::: {.cell-output-display}\n![](caret_R_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Distribuciones\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf_pulsar %>% \n  gather(key = \"variable\", value = \"valor\", -pulsar) %>% \n  ggplot(data = ., aes(x = valor, fill = pulsar)) +\n  facet_wrap(~variable, scales = \"free\", ncol = 4) +\n  geom_density(alpha = 0.9) +\n  scale_x_log10() +\n  labs(x = \"\", y = \"Densidad\", title = \"Escala logarítmica\",\n       fill = \"¿Púlsar?\") +\n  scale_fill_manual(values = c(\"#790222\", \"#033660\")) +\n  mi_temagg\n```\n\n::: {.cell-output-display}\n![](caret_R_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=768}\n:::\n:::\n\n\n## Correlaciones\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Cargando biblioteca corrplot\nlibrary(corrplot)\n\ndf_pulsar %>% mutate_if(is.numeric, scale)  %>% select_if(is.numeric) %>%\n  cor(method = \"spearman\") %>% \n  corrplot(method = \"pie\", type = \"upper\", order = \"hclust\", diag = FALSE,\n           tl.srt = 35, tl.col = \"black\", tl.cex = 1)\n```\n\n::: {.cell-output-display}\n![](caret_R_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n# Train y Test\n\n- La partición se hace 70 y 30%, para entrenamiento (`df_train`) y prueba (`df_test`), respectivamente.\n- El argumento `list = FALSE` en la función `createDataPartition`, permite que el objeto sea devuelto en forma de `vector`.\n- [Documentación de biblioteca `caret`.](https://topepo.github.io/caret/index.html)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Cargando biblioteca caret\nlibrary(caret)\n\n# Semilla para reproducir resutlados\nset.seed(073)\n\n# Particiones\nidx <- createDataPartition(y = df_pulsar$pulsar, times = 1, p = 0.7, list = FALSE)\ndf_train <- df_pulsar[idx, ]\ndf_test <- df_pulsar[-idx, ]\n```\n:::\n\n\n- **Proporción de la variable respuesta en train y test:**\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggpubr::ggarrange(\n  df_train %>% group_by(pulsar) %>% count() %>% ungroup() %>% mutate(prop = n/sum(n)) %>% \n  ggplot(data = ., aes(x = pulsar, y = prop)) +\n  geom_col(color = \"black\", fill = \"#033660\") +\n  geom_label(aes(label = round(prop, digits = 2))) +\n  labs(x = \"¿Púlsar?\", title = \"Distribución en train\",\n       subtitle = \"0=No\\n1=Sí\") +\n  mi_temagg,\n\n  df_test %>% group_by(pulsar) %>% count() %>% ungroup() %>% mutate(prop = n/sum(n)) %>% \n  ggplot(data = ., aes(x = pulsar, y = prop)) +\n  geom_col(color = \"black\", fill = \"#033660\") +\n  geom_label(aes(label = round(prop, digits = 2))) +\n  labs(x = \"¿Púlsar?\", title = \"Distribución en test\",\n       subtitle = \"0=No\\n1=Sí\") +\n  mi_temagg,\n  \n  ncol = 2\n)\n```\n\n::: {.cell-output-display}\n![](caret_R_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n# Modelos\n\n- Se utiliza el método `ranger`.\n- Los argumentos se han dejado como están por defecto.\n- [Referencia de algoritmo random forest con caret.](http://topepo.github.io/caret/train-models-by-tag.html#random-forest)\n- En este caso particular se usa el método `ranger` que permite ajustar tres hiperparámetros:\n    - `mtry`: número de predictores seleccionados.\n    - `splitrule`: criterio de división. En problemas de clasificación se suele utilizar `Gini`, aunque hay más disponibles. [Ver documentación de `ranger`.](https://cran.r-project.org/web/packages/ranger/ranger.pdf)\n    - `min.node.size`: número mínimo de observaciones en cada nodo. Por defecto para problemas de clasificación es 1.\n\n## Random Forest\n\n### Algoritmo\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Algoritmo de random forest\nmodelo_rf <- train(pulsar ~ ., data = df_train, method = \"ranger\")\n\n# Guardando modelo\nsaveRDS(object = modelo_rf, file = \"models_fit/RandomForest.rds\")\n```\n:::\n\n\n- **Resultados:**\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Cargando modelo\nmod_rf <- readRDS(\"models_fit/RandomForest.rds\")\n\n# Resultados del modelo\nmod_rf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom Forest \n\n12530 samples\n    8 predictor\n    2 classes: '0', '1' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 12530, 12530, 12530, 12530, 12530, 12530, ... \nResampling results across tuning parameters:\n\n  mtry  splitrule   Accuracy   Kappa    \n  2     gini        0.9801226  0.8758954\n  2     extratrees  0.9794474  0.8705685\n  5     gini        0.9801169  0.8762727\n  5     extratrees  0.9803843  0.8777407\n  8     gini        0.9795793  0.8731006\n  8     extratrees  0.9804887  0.8788098\n\nTuning parameter 'min.node.size' was held constant at a value of 1\nAccuracy was used to select the optimal model using the largest value.\nThe final values used for the model were mtry = 8, splitrule = extratrees\n and min.node.size = 1.\n```\n:::\n:::\n\n\n### Desempeño\n\n- **Matriz de confusión en test:**\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Predicciones en nuevos datos\npredict_rf <- predict(object = mod_rf, newdata = df_test)\n\n# Matriz de confución\nconfusionMatrix(predict_rf, df_test$pulsar, positive = \"1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 4840   84\n         1   37  407\n                                          \n               Accuracy : 0.9775          \n                 95% CI : (0.9731, 0.9813)\n    No Information Rate : 0.9085          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.8583          \n                                          \n Mcnemar's Test P-Value : 2.892e-05       \n                                          \n            Sensitivity : 0.82892         \n            Specificity : 0.99241         \n         Pos Pred Value : 0.91667         \n         Neg Pred Value : 0.98294         \n             Prevalence : 0.09147         \n         Detection Rate : 0.07582         \n   Detection Prevalence : 0.08271         \n      Balanced Accuracy : 0.91067         \n                                          \n       'Positive' Class : 1               \n                                          \n```\n:::\n:::\n\n\n## SVM\n\n- Se utiliza el método `svmRadial` que está contenido en la biblioteca `kernlab`.\n- La configuración está por defecto.\n- Este algoritmo permite ajustar hiperparámetros `sigma` y `C` (costo).\n- [Documentación `kernlab`.](https://cran.r-project.org/web/packages/kernlab/kernlab.pdf)\n\n### Algoritmo\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Algoritmo\nmodelo_svmR <- train(pulsar ~ ., data = df_train, method = \"svmRadial\")\n\n# Guardando modelo\nsaveRDS(object = modelo_svmR, file = \"models_fit/SVM_Radial.rds\")\n```\n:::\n\n\n- **Resultados:**\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Cargando modelo\nmod_svmR <- readRDS(\"models_fit/SVM_Radial.rds\")\n\n# Resultados del modelo\nmod_svmR\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSupport Vector Machines with Radial Basis Function Kernel \n\n12530 samples\n    8 predictor\n    2 classes: '0', '1' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 12530, 12530, 12530, 12530, 12530, 12530, ... \nResampling results across tuning parameters:\n\n  C     Accuracy   Kappa    \n  0.25  0.9785764  0.8629191\n  0.50  0.9785329  0.8635606\n  1.00  0.9787235  0.8654589\n\nTuning parameter 'sigma' was held constant at a value of 0.4893064\nAccuracy was used to select the optimal model using the largest value.\nThe final values used for the model were sigma = 0.4893064 and C = 1.\n```\n:::\n:::\n\n\n### Desempeño\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npredict_svmR <- predict(object = mod_svmR, newdata = df_test)\nconfusionMatrix(predict_svmR, df_test$pulsar, positive = \"1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 4852   95\n         1   25  396\n                                          \n               Accuracy : 0.9776          \n                 95% CI : (0.9733, 0.9814)\n    No Information Rate : 0.9085          \n    P-Value [Acc > NIR] : < 2.2e-16       \n                                          \n                  Kappa : 0.8563          \n                                          \n Mcnemar's Test P-Value : 2.999e-10       \n                                          \n            Sensitivity : 0.80652         \n            Specificity : 0.99487         \n         Pos Pred Value : 0.94062         \n         Neg Pred Value : 0.98080         \n             Prevalence : 0.09147         \n         Detection Rate : 0.07377         \n   Detection Prevalence : 0.07843         \n      Balanced Accuracy : 0.90070         \n                                          \n       'Positive' Class : 1               \n                                          \n```\n:::\n:::\n\n\n## Comparación de modelos\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmod_svmR$resample %>% \n  select(-Resample) %>% \n  mutate(Modelo = \"SVM\") %>% \n  bind_rows(mod_rf$resample) %>% \n  select(-Resample) %>% \n  replace_na(list(Modelo = \"Random Forest\")) %>% \n  gather(key = \"Medida\", value = \"Valor\", -Modelo) %>% \n  ggplot(data = ., aes(x = Modelo, y = Valor, fill = Modelo)) +\n  facet_wrap(~Medida, scales = \"free\", ncol = 2) +\n  geom_violin(alpha = 0.9) +\n  stat_summary(fun = mean, geom = \"point\", pch = 19) +\n  labs(y = \"\", title = \"Comparación de modelos\",\n       subtitle = \"Predicción de estrellas púlsar\") +\n  scale_fill_manual(values =  c(\"#790222\", \"#033660\")) +\n  mi_temagg +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](caret_R_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=672}\n:::\n:::",
    "supporting": [
      "caret_R_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}