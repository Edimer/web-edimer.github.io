{
  "hash": "1530984c68ecdfcbde7f414d5d7eeb89",
  "result": {
    "markdown": "---\ntitle: \"R + Python: I\"\nauthor: \"Edimer (Sidereus)\"\ndate: \"01-20-2020\"\ndescription: \"Utilizando python desde R con la biblioteca reticulate. Elementos básicos de python para operaciones numéricas comunes, visualización y ejemplo corto con scikit-learn.\"\ncategories:\n  - R\n  - Python\n  - Programación\nimage: \"img.png\"\nlang: es\ncss: estilo.css\n---\n\n\n# Requisitos previos\n\n- Tener instalado [Python](https://www.python.org/)\n- Recomendable instalar [Anaconda Navigator](https://anaconda.org/anaconda/anaconda-navigator)\n- Instalar la biblioteca [`reticulate`](https://rstudio.github.io/reticulate/index.html) desde R.\n\n# Biblioteca Reticulate\n\n<center>\n<img src = \"https://rstudio.github.io/reticulate/images/reticulated_python.png\" width=150 />\n</center>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n```\n:::\n\n\n\n# Requisitos previos\n\n- Tener instalado [Python](https://www.python.org/)\n- Recomendable instalar [Anaconda Navigator](https://anaconda.org/anaconda/anaconda-navigator)\n- Instalar la biblioteca [`reticulate`](https://rstudio.github.io/reticulate/index.html) desde R.\n\n# Biblioteca Reticulate\n\n<center>\n<img src = \"https://rstudio.github.io/reticulate/images/reticulated_python.png\" width=150 />\n</center>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n```\n:::\n\n\n# Importando módulos de *python*\n\n## Importando `numpy`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnp <- import(\"numpy\")\nnp$argmin(c(2, 1, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n- En esta salida se muestra cómo aplicar la función `arcgmin` de *python* sobre un vector de *R*. Devuelve la posición (índice) donde se encuentra el valor mínimo del vector dado.\n- Es posible acceder a todas las funciones de `numpy` desde el objeto `np` con el símbolo dólar `$`.\n\n<center>\n<img src=\"img1.png\" width=650/>\n</center>\n\n## Importando `os`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nos <- import(\"os\")\nos$getcwd()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"D:\\\\Otros\\\\Github\\\\web-edimer\\\\web-edimer.github.io\\\\posts\\\\pyr1\"\n```\n:::\n:::\n\n\n# Usando *python*\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nnp.argmax(np.array([1, 4, 10]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\n\n# Función de *python* llamada por *R*\n\n- Declarando la función en *python*:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef add(x, y):\n  return x + y\n  \nadd(2, 2)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n```\n:::\n:::\n\n\n- Llamando la función `add()` desde *R*\n\n\n::: {.cell}\n\n```{.r .cell-code}\npy$add(2, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\n# Usando `numpy`\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnp.arange(0, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([0, 1, 2, 3, 4])\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nnp.arange(0, 10, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([0, 2, 4, 6, 8])\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nnp.ones((2, 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[1., 1.],\n       [1., 1.]])\n```\n:::\n:::\n\n\n- **Simulando 100 valores aleatorios de la distribución normal, con media 2 y varianza 3:**.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnp.random.seed(1)\nvalores = np.random.normal(loc = 2, scale = 3, size = 100)\nvalores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([ 6.87303609,  0.16473076,  0.41548474, -1.21890587,  4.59622289,\n       -4.90461609,  7.23443529, -0.2836207 ,  2.95711729,  1.25188887,\n        6.38632381, -4.18042213,  1.03274839,  0.84783694,  5.40130833,\n       -1.2996738 ,  1.48271538, -0.63357525,  2.12664124,  3.74844564,\n       -1.30185753,  5.43417113,  4.70477216,  3.50748302,  4.70256785,\n       -0.05118358,  1.63132932, -0.8073083 ,  1.19633576,  3.5910664 ,\n       -0.07498226,  0.80973942, -0.0615181 , -0.53561692, -0.01373839,\n        1.9620062 , -1.35193105,  2.70324709,  6.97940653,  4.22613248,\n        1.42449334, -0.66288689, -0.24147488,  7.0773638 ,  2.15242326,\n        0.08901306,  2.57274645,  8.30076541,  2.36047686,  3.85160933,\n        2.90051096,  0.94325046, -1.42755459,  0.95197183,  1.3733173 ,\n        3.75986957,  4.51695024,  4.79330624,  2.85676198,  4.65542349,\n       -0.26319382,  5.75860447,  3.53878946,  1.10572149,  3.46555444,\n        1.77328486,  5.39488816,  6.55945045,  8.55672622, -2.18948901,\n       -2.33234142,  0.48660241,  2.48011121,  4.62850676,  2.94690484,\n       -4.06660365,  1.08138796,  4.48392393,  2.69028421,  4.28603354,\n        1.33301557,  1.39772579,  2.55968417,  3.23015494,  2.59489916,\n        2.35702594, -0.01198686,  3.13269136,  2.36546381,  5.38845172,\n        5.59675364,  2.55546925,  0.87414515,  0.08380878,  3.27048306,\n        2.23202021,  0.96843897,  2.13079057,  0.13999747,  4.0940961 ])\n```\n:::\n:::\n\n\n# Gráfico con `matplotlib`\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib\nimport matplotlib.pyplot as plt\n\nfig, g1 = plt.subplots()\ng1 = g1.hist(valores, bins = 30)\ng1 = plt.grid()\ng1\n```\n:::\n\n\n<center>\n<img src=\"plt1.png\"/>\n</center>\n\n# Ayudas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nos <- import(\"os\")\npy_help(os$chdir)\n```\n:::\n\n\nEn el editor de texto aparecerá el siguiente texto:\n\n<center>\n<img src=\"img2.png\" width=650/>\n</center>\n\n# Objetos\n\n## Tupla desde *R*\n\n- Creando una tupla y obteniendo su clase:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntupla1 <- tuple(c(1, 2, 3, \"A\"))\ntupla1\n## (['1', '2', '3', 'A'],)\n\n# Clase en python\nclass(tupla1)\n## [1] \"python.builtin.tuple\"  \"python.builtin.object\"\n```\n:::\n\n\n- Coercionar el objeto `tupla1` de clase `tuple` en *python* directamente a *R*:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntupla1_r <- py_to_r(tupla1)\ntupla1_r\n## [[1]]\n## [1] \"1\" \"2\" \"3\" \"A\"\n\n# Clase en R\nclass(tupla1_r)\n## [1] \"list\"\n```\n:::\n\n\n## Diccionario desde *R*\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Objeto\ndict1 <- dict(x = \"Hola\", y = 3.5, z = 1L)\ndict1\n## {'x': 'Hola', 'y': 3.5, 'z': 1}\n\n# Clase\nclass(dict1)\n## [1] \"python.builtin.dict\"   \"python.builtin.object\"\n\n# Nombres\nnames(dict1)\n## [1] \"x\" \"y\" \"z\"\n\n# Atributos\nattributes(dict1)\n## $class\n## [1] \"python.builtin.dict\"   \"python.builtin.object\"\n\n# Coerción a objeto R\ndict1_r <- py_to_r(dict1)\ndict1_r\n## $x\n## [1] \"Hola\"\n## \n## $y\n## [1] 3.5\n## \n## $z\n## [1] 1\n\n# Clase en R\nclass(dict1_r)\n## [1] \"list\"\n```\n:::\n\n\n## Tupla en *python*\n\n- Creando tupla en *python*:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Creando tupla\naltura = (1.65, 1.72, 1.56, 1.84, 1.92)\naltura\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1.65, 1.72, 1.56, 1.84, 1.92)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Otra tupla\npeso = (67, 75, 67, 78, 85)\npeso\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(67, 75, 67, 78, 85)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Tipo (clase) de objetos\ntype(altura)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'tuple'>\n```\n:::\n\n```{.python .cell-code}\ntype(peso)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'tuple'>\n```\n:::\n:::\n\n\n- Llamando la tupla desde *R*:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass(py$altura)\n## [1] \"list\"\nplot(x = py$altura, y = py$peso, pch = 19, cex = 2)\n```\n\n::: {.cell-output-display}\n![](Py_R_1_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Tipos de objetos en ambos lenguajes\n\n<center>\n<img src=\"img3.png\" width = 650/>\n</center>\n\n# Índices\n\n- Desde *python*:\n\n\n::: {.cell}\n\n```{.python .cell-code}\naltura\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1.65, 1.72, 1.56, 1.84, 1.92)\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\naltura[0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.65\n```\n:::\n:::\n\n\n- En *R*:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npy$altura[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] 1.65\n```\n:::\n:::\n\n\n# Instalando un módulo de *python* desde *R*\n\n## Instalando `pandas`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npy_install(\"pandas\")\n```\n:::\n\n\n## Importando `pandas` y leyendo archivo *.csv*\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\niris_py = pd.read_csv(\"Iris.csv\")\niris_py\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Sepal.Length  Sepal.Width  Petal.Length  Petal.Width    Species\n0             5.1          3.5           1.4          0.2     setosa\n1             4.9          3.0           1.4          0.2     setosa\n2             4.7          3.2           1.3          0.2     setosa\n3             4.6          3.1           1.5          0.2     setosa\n4             5.0          3.6           1.4          0.2     setosa\n..            ...          ...           ...          ...        ...\n145           6.7          3.0           5.2          2.3  virginica\n146           6.3          2.5           5.0          1.9  virginica\n147           6.5          3.0           5.2          2.0  virginica\n148           6.2          3.4           5.4          2.3  virginica\n149           5.9          3.0           5.1          1.8  virginica\n\n[150 rows x 5 columns]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntype(iris_py)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\n```\n:::\n:::\n\n\n- Estadísticos descriptivos:\n\n\n::: {.cell}\n\n```{.python .cell-code}\niris_py.describe()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Sepal.Length  Sepal.Width  Petal.Length  Petal.Width\ncount    150.000000   150.000000    150.000000   150.000000\nmean       5.843333     3.057333      3.758000     1.199333\nstd        0.828066     0.435866      1.765298     0.762238\nmin        4.300000     2.000000      1.000000     0.100000\n25%        5.100000     2.800000      1.600000     0.300000\n50%        5.800000     3.000000      4.350000     1.300000\n75%        6.400000     3.300000      5.100000     1.800000\nmax        7.900000     4.400000      6.900000     2.500000\n```\n:::\n:::\n\n\n- Seleccionando variables por nombre:\n\n\n::: {.cell}\n\n```{.python .cell-code}\niris_py[[\"Sepal.Length\", \"Sepal.Width\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Sepal.Length  Sepal.Width\n0             5.1          3.5\n1             4.9          3.0\n2             4.7          3.2\n3             4.6          3.1\n4             5.0          3.6\n..            ...          ...\n145           6.7          3.0\n146           6.3          2.5\n147           6.5          3.0\n148           6.2          3.4\n149           5.9          3.0\n\n[150 rows x 2 columns]\n```\n:::\n:::\n\n\n- Filtrando datos:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfiltro = iris_py[\"Sepal.Width\"] <= 2.2\niris_py[filtro]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Sepal.Length  Sepal.Width  Petal.Length  Petal.Width     Species\n60            5.0          2.0           3.5          1.0  versicolor\n62            6.0          2.2           4.0          1.0  versicolor\n68            6.2          2.2           4.5          1.5  versicolor\n119           6.0          2.2           5.0          1.5   virginica\n```\n:::\n:::\n\n\n- `Dataframe` como `array`:\n\n\n::: {.cell}\n\n```{.python .cell-code}\niris_py.values\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[5.1, 3.5, 1.4, 0.2, 'setosa'],\n       [4.9, 3.0, 1.4, 0.2, 'setosa'],\n       [4.7, 3.2, 1.3, 0.2, 'setosa'],\n       [4.6, 3.1, 1.5, 0.2, 'setosa'],\n       [5.0, 3.6, 1.4, 0.2, 'setosa'],\n       [5.4, 3.9, 1.7, 0.4, 'setosa'],\n       [4.6, 3.4, 1.4, 0.3, 'setosa'],\n       [5.0, 3.4, 1.5, 0.2, 'setosa'],\n       [4.4, 2.9, 1.4, 0.2, 'setosa'],\n       [4.9, 3.1, 1.5, 0.1, 'setosa'],\n       [5.4, 3.7, 1.5, 0.2, 'setosa'],\n       [4.8, 3.4, 1.6, 0.2, 'setosa'],\n       [4.8, 3.0, 1.4, 0.1, 'setosa'],\n       [4.3, 3.0, 1.1, 0.1, 'setosa'],\n       [5.8, 4.0, 1.2, 0.2, 'setosa'],\n       [5.7, 4.4, 1.5, 0.4, 'setosa'],\n       [5.4, 3.9, 1.3, 0.4, 'setosa'],\n       [5.1, 3.5, 1.4, 0.3, 'setosa'],\n       [5.7, 3.8, 1.7, 0.3, 'setosa'],\n       [5.1, 3.8, 1.5, 0.3, 'setosa'],\n       [5.4, 3.4, 1.7, 0.2, 'setosa'],\n       [5.1, 3.7, 1.5, 0.4, 'setosa'],\n       [4.6, 3.6, 1.0, 0.2, 'setosa'],\n       [5.1, 3.3, 1.7, 0.5, 'setosa'],\n       [4.8, 3.4, 1.9, 0.2, 'setosa'],\n       [5.0, 3.0, 1.6, 0.2, 'setosa'],\n       [5.0, 3.4, 1.6, 0.4, 'setosa'],\n       [5.2, 3.5, 1.5, 0.2, 'setosa'],\n       [5.2, 3.4, 1.4, 0.2, 'setosa'],\n       [4.7, 3.2, 1.6, 0.2, 'setosa'],\n       [4.8, 3.1, 1.6, 0.2, 'setosa'],\n       [5.4, 3.4, 1.5, 0.4, 'setosa'],\n       [5.2, 4.1, 1.5, 0.1, 'setosa'],\n       [5.5, 4.2, 1.4, 0.2, 'setosa'],\n       [4.9, 3.1, 1.5, 0.2, 'setosa'],\n       [5.0, 3.2, 1.2, 0.2, 'setosa'],\n       [5.5, 3.5, 1.3, 0.2, 'setosa'],\n       [4.9, 3.6, 1.4, 0.1, 'setosa'],\n       [4.4, 3.0, 1.3, 0.2, 'setosa'],\n       [5.1, 3.4, 1.5, 0.2, 'setosa'],\n       [5.0, 3.5, 1.3, 0.3, 'setosa'],\n       [4.5, 2.3, 1.3, 0.3, 'setosa'],\n       [4.4, 3.2, 1.3, 0.2, 'setosa'],\n       [5.0, 3.5, 1.6, 0.6, 'setosa'],\n       [5.1, 3.8, 1.9, 0.4, 'setosa'],\n       [4.8, 3.0, 1.4, 0.3, 'setosa'],\n       [5.1, 3.8, 1.6, 0.2, 'setosa'],\n       [4.6, 3.2, 1.4, 0.2, 'setosa'],\n       [5.3, 3.7, 1.5, 0.2, 'setosa'],\n       [5.0, 3.3, 1.4, 0.2, 'setosa'],\n       [7.0, 3.2, 4.7, 1.4, 'versicolor'],\n       [6.4, 3.2, 4.5, 1.5, 'versicolor'],\n       [6.9, 3.1, 4.9, 1.5, 'versicolor'],\n       [5.5, 2.3, 4.0, 1.3, 'versicolor'],\n       [6.5, 2.8, 4.6, 1.5, 'versicolor'],\n       [5.7, 2.8, 4.5, 1.3, 'versicolor'],\n       [6.3, 3.3, 4.7, 1.6, 'versicolor'],\n       [4.9, 2.4, 3.3, 1.0, 'versicolor'],\n       [6.6, 2.9, 4.6, 1.3, 'versicolor'],\n       [5.2, 2.7, 3.9, 1.4, 'versicolor'],\n       [5.0, 2.0, 3.5, 1.0, 'versicolor'],\n       [5.9, 3.0, 4.2, 1.5, 'versicolor'],\n       [6.0, 2.2, 4.0, 1.0, 'versicolor'],\n       [6.1, 2.9, 4.7, 1.4, 'versicolor'],\n       [5.6, 2.9, 3.6, 1.3, 'versicolor'],\n       [6.7, 3.1, 4.4, 1.4, 'versicolor'],\n       [5.6, 3.0, 4.5, 1.5, 'versicolor'],\n       [5.8, 2.7, 4.1, 1.0, 'versicolor'],\n       [6.2, 2.2, 4.5, 1.5, 'versicolor'],\n       [5.6, 2.5, 3.9, 1.1, 'versicolor'],\n       [5.9, 3.2, 4.8, 1.8, 'versicolor'],\n       [6.1, 2.8, 4.0, 1.3, 'versicolor'],\n       [6.3, 2.5, 4.9, 1.5, 'versicolor'],\n       [6.1, 2.8, 4.7, 1.2, 'versicolor'],\n       [6.4, 2.9, 4.3, 1.3, 'versicolor'],\n       [6.6, 3.0, 4.4, 1.4, 'versicolor'],\n       [6.8, 2.8, 4.8, 1.4, 'versicolor'],\n       [6.7, 3.0, 5.0, 1.7, 'versicolor'],\n       [6.0, 2.9, 4.5, 1.5, 'versicolor'],\n       [5.7, 2.6, 3.5, 1.0, 'versicolor'],\n       [5.5, 2.4, 3.8, 1.1, 'versicolor'],\n       [5.5, 2.4, 3.7, 1.0, 'versicolor'],\n       [5.8, 2.7, 3.9, 1.2, 'versicolor'],\n       [6.0, 2.7, 5.1, 1.6, 'versicolor'],\n       [5.4, 3.0, 4.5, 1.5, 'versicolor'],\n       [6.0, 3.4, 4.5, 1.6, 'versicolor'],\n       [6.7, 3.1, 4.7, 1.5, 'versicolor'],\n       [6.3, 2.3, 4.4, 1.3, 'versicolor'],\n       [5.6, 3.0, 4.1, 1.3, 'versicolor'],\n       [5.5, 2.5, 4.0, 1.3, 'versicolor'],\n       [5.5, 2.6, 4.4, 1.2, 'versicolor'],\n       [6.1, 3.0, 4.6, 1.4, 'versicolor'],\n       [5.8, 2.6, 4.0, 1.2, 'versicolor'],\n       [5.0, 2.3, 3.3, 1.0, 'versicolor'],\n       [5.6, 2.7, 4.2, 1.3, 'versicolor'],\n       [5.7, 3.0, 4.2, 1.2, 'versicolor'],\n       [5.7, 2.9, 4.2, 1.3, 'versicolor'],\n       [6.2, 2.9, 4.3, 1.3, 'versicolor'],\n       [5.1, 2.5, 3.0, 1.1, 'versicolor'],\n       [5.7, 2.8, 4.1, 1.3, 'versicolor'],\n       [6.3, 3.3, 6.0, 2.5, 'virginica'],\n       [5.8, 2.7, 5.1, 1.9, 'virginica'],\n       [7.1, 3.0, 5.9, 2.1, 'virginica'],\n       [6.3, 2.9, 5.6, 1.8, 'virginica'],\n       [6.5, 3.0, 5.8, 2.2, 'virginica'],\n       [7.6, 3.0, 6.6, 2.1, 'virginica'],\n       [4.9, 2.5, 4.5, 1.7, 'virginica'],\n       [7.3, 2.9, 6.3, 1.8, 'virginica'],\n       [6.7, 2.5, 5.8, 1.8, 'virginica'],\n       [7.2, 3.6, 6.1, 2.5, 'virginica'],\n       [6.5, 3.2, 5.1, 2.0, 'virginica'],\n       [6.4, 2.7, 5.3, 1.9, 'virginica'],\n       [6.8, 3.0, 5.5, 2.1, 'virginica'],\n       [5.7, 2.5, 5.0, 2.0, 'virginica'],\n       [5.8, 2.8, 5.1, 2.4, 'virginica'],\n       [6.4, 3.2, 5.3, 2.3, 'virginica'],\n       [6.5, 3.0, 5.5, 1.8, 'virginica'],\n       [7.7, 3.8, 6.7, 2.2, 'virginica'],\n       [7.7, 2.6, 6.9, 2.3, 'virginica'],\n       [6.0, 2.2, 5.0, 1.5, 'virginica'],\n       [6.9, 3.2, 5.7, 2.3, 'virginica'],\n       [5.6, 2.8, 4.9, 2.0, 'virginica'],\n       [7.7, 2.8, 6.7, 2.0, 'virginica'],\n       [6.3, 2.7, 4.9, 1.8, 'virginica'],\n       [6.7, 3.3, 5.7, 2.1, 'virginica'],\n       [7.2, 3.2, 6.0, 1.8, 'virginica'],\n       [6.2, 2.8, 4.8, 1.8, 'virginica'],\n       [6.1, 3.0, 4.9, 1.8, 'virginica'],\n       [6.4, 2.8, 5.6, 2.1, 'virginica'],\n       [7.2, 3.0, 5.8, 1.6, 'virginica'],\n       [7.4, 2.8, 6.1, 1.9, 'virginica'],\n       [7.9, 3.8, 6.4, 2.0, 'virginica'],\n       [6.4, 2.8, 5.6, 2.2, 'virginica'],\n       [6.3, 2.8, 5.1, 1.5, 'virginica'],\n       [6.1, 2.6, 5.6, 1.4, 'virginica'],\n       [7.7, 3.0, 6.1, 2.3, 'virginica'],\n       [6.3, 3.4, 5.6, 2.4, 'virginica'],\n       [6.4, 3.1, 5.5, 1.8, 'virginica'],\n       [6.0, 3.0, 4.8, 1.8, 'virginica'],\n       [6.9, 3.1, 5.4, 2.1, 'virginica'],\n       [6.7, 3.1, 5.6, 2.4, 'virginica'],\n       [6.9, 3.1, 5.1, 2.3, 'virginica'],\n       [5.8, 2.7, 5.1, 1.9, 'virginica'],\n       [6.8, 3.2, 5.9, 2.3, 'virginica'],\n       [6.7, 3.3, 5.7, 2.5, 'virginica'],\n       [6.7, 3.0, 5.2, 2.3, 'virginica'],\n       [6.3, 2.5, 5.0, 1.9, 'virginica'],\n       [6.5, 3.0, 5.2, 2.0, 'virginica'],\n       [6.2, 3.4, 5.4, 2.3, 'virginica'],\n       [5.9, 3.0, 5.1, 1.8, 'virginica']], dtype=object)\n```\n:::\n:::\n\n\n## Importando `tensorflow` desde python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport tensorflow as tf\n```\n:::\n\n\n- Funciones desde `tf`:\n\n<center>\n<img src = \"img4.png\" width=650/>\n</center>\n\n# Visualizando datos con `matplotlib`\n\n## Ejemplo 1\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nx = np.arange(0, 20)\ny = x**2\ng1 = plt.plot(x, y, \"g--\")\ng1 = plt.title(\"X vs Y\")\ng1 = plt.xlabel(\"Eje x\")\ng1 = plt.ylabel(\"Eje Y\")  \ng1\n```\n:::\n\n\n<center>\n<img src=\"plt2.png\"/>\n</center>\n\n## Ejemplo 2\n\n\n::: {.cell}\n\n```{.python .cell-code}\nw = np.arange(0, 50).reshape(5, 10)\nw\n```\n\n::: {.cell-output .cell-output-stdout}\n```\narray([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n       [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n       [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n       [40, 41, 42, 43, 44, 45, 46, 47, 48, 49]])\n```\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ng2 = plt.imshow(w)\ng2 = plt.colorbar()\nplt.show()\n```\n:::\n\n\n<center>\n<img src=\"plt3.png\"/>\n</center>\n\n## Ejemplo 3\n\n- Gráfico desde un `Dataframe`:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ng3 = iris_py.plot(x = \"Sepal.Length\", y = \"Sepal.Width\", kind = \"scatter\",\n                  color = \"red\")                 \ng3\n```\n:::\n\n\n<center>\n<img src=\"plt4.png\"/>\n</center>\n\n# Modelo con `scikit-learn`\n\n- [Ejemplo DataCamp](https://www.datacamp.com/community/tutorials/decision-tree-classification-python)\n- [Fuente de datos: PIMA](https://www.kaggle.com/uciml/pima-indians-diabetes-database)\n- [`scikit-learn`](https://scikit-learn.org/stable/)\n\n## Importando módulos de *python*\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport sklearn\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.model_selection import train_test_split \nfrom sklearn import metrics \n```\n:::\n\n\n## Cargando datos\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncol_names = ['pregnant', 'glucose', 'bp', 'skin', 'insulin', 'bmi', 'pedigree',\n             'age', 'label']\n# load dataset\npima = pd.read_csv(\"diabetes.csv\", header=None, names=col_names)\npima = pima[1:]\npima.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  pregnant glucose  bp skin insulin   bmi pedigree age label\n1        6     148  72   35       0  33.6    0.627  50     1\n2        1      85  66   29       0  26.6    0.351  31     0\n3        8     183  64    0       0  23.3    0.672  32     1\n4        1      89  66   23      94  28.1    0.167  21     0\n5        0     137  40   35     168  43.1    2.288  33     1\n```\n:::\n:::\n\n\n## Selección de características\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Fraccionando la base de datos en predictoras (X) y respuesta (Y)\nfeature_cols = ['pregnant', 'insulin', 'bmi', 'age','glucose','bp','pedigree']\nX = pima[feature_cols] \ny = pima.label\n```\n:::\n\n\n## Train - Test\n\n\n::: {.cell}\n\n```{.python .cell-code}\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)\n```\n:::\n\n\n## Construyendo Modelo\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Clasificador\nclf = DecisionTreeClassifier()\n\n# Clasificador en train --> Entrenando modelo\nclf_fit = clf.fit(X = X_train, y = y_train)\n```\n:::\n\n\n## Evaluación del modelo\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Predicciones\ny_pred = clf_fit.predict(X_test)\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_pred))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAccuracy: 0.6753246753246753\n```\n:::\n:::\n",
    "supporting": [
      "Py_R_1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}